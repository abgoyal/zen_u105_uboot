

#ifndef _SDIO_CARD_PAL_H_
#define _SDIO_CARD_PAL_H_

#include "asm/arch/sci_types.h"

struct SDIO_CARD_PAL_Struct;
typedef struct SDIO_CARD_PAL_Struct* SDIO_CARD_PAL_HANDLE;

typedef enum
{
	SDIO_CARD_PAL_SLOT_0,
	SDIO_CARD_PAL_SLOT_1,
	SDIO_CARD_PAL_SLOT_2,
	SDIO_CARD_PAL_SLOT_3,
	SDIO_CARD_PAL_SLOT_4,
	SDIO_CARD_PAL_SLOT_5,
	SDIO_CARD_PAL_SLOT_6,
	SDIO_CARD_PAL_SLOT_7
,
	SDIO_CARD_PAL_SLOT_MAX
}
SDIO_CARD_PAL_SLOT_E;

PUBLIC SDIO_CARD_PAL_HANDLE SDIO_Card_Pal_Open(SDIO_CARD_PAL_SLOT_E slotNo);

typedef enum
{
	SDIO_CARD_PAL_OFF,
	SDIO_CARD_PAL_ON
}
SDIO_CARD_PAL_PWR_E;
PUBLIC BOOLEAN SDIO_Card_Pal_Pwr(SDIO_CARD_PAL_HANDLE handle,SDIO_CARD_PAL_PWR_E onOrOff);

typedef enum
{
	SDIO_CARD_PAL_400KHz,			// 初始化频率
#if defined (CONFIG_SC8825) || defined(CONFIG_SC7710G2)
	SDIO_CARD_PAL_1MHz,
	SDIO_CARD_PAL_2MHz,
	SDIO_CARD_PAL_4MHz,
	SDIO_CARD_PAL_8MHz,
	SDIO_CARD_PAL_12MHz,
#endif	
	SDIO_CARD_PAL_20MHz,			// MMC卡的工作频率
	SDIO_CARD_PAL_25MHz,			// SD卡的工作频率
	SDIO_CARD_PAL_50MHz,			// SD卡高速模式下的工作频率
#if defined (CONFIG_SC8825) || defined(CONFIG_SC7710G2)
	SDIO_CARD_PAL_100MHz,
#endif
}
SDIO_CARD_PAL_CLKTYPE_E;
PUBLIC BOOLEAN SDIO_Card_Pal_SetClk(SDIO_CARD_PAL_HANDLE handle,SDIO_CARD_PAL_CLKTYPE_E clkType);

typedef enum
{
	SDIO_CARD_PAL_1_BIT,
	SDIO_CARD_PAL_4_BIT,
	SDIO_CARD_PAL_8_BIT
}SDIO_CARD_PAL_BUFWIDTH_E;
PUBLIC BOOLEAN SDIO_Card_Pal_SetBusWidth(SDIO_CARD_PAL_HANDLE handle,SDIO_CARD_PAL_BUFWIDTH_E widthType);

typedef enum
{
#if defined (CONFIG_SC8825) || defined(CONFIG_SC7710G2)
	EMMC_SPEED_SDR12,
	EMMC_SPEED_SDR25,
	EMMC_SPEED_SDR50,
	EMMC_SPEED_SDR104,
	EMMC_SPEED_DDR50,
#else
	SDIO_CARD_PAL_LOW_SPEED,
	SDIO_CARD_PAL_HIGH_SPEED
#endif
}SDIO_CARD_PAL_SPEEDMODE_E;
PUBLIC BOOLEAN SDIO_Card_Pal_SetSpeedMode(SDIO_CARD_PAL_HANDLE handle,SDIO_CARD_PAL_SPEEDMODE_E speedMode);

typedef enum
{
// cmdindex,rsp,transmode
	CARD_CMD0_GO_IDLE_STATE,
	CARD_CMD1_SEND_OP_COND, /*MMC*/
	CARD_CMD2_ALL_SEND_CID,
	CARD_CMD3_SEND_RELATIVE_ADDR, /*SD*/
	CARD_CMD3_SET_RELATIVE_ADDR, /*MMC*/
	CARD_CMD4_SET_DSR,
	CARD_CMD6_SWITCH_FUNC,
	CARD_CMD7_SELECT_DESELECT_CARD,
	CARD_CMD8_SEND_IF_COND, /*SD*/
	CARD_CMD9_SEND_CSD,
	CARD_CMD10_SEND_CID,
	CARD_CMD11_READ_DAT_UNTIL_STOP, /*MMC*/
	CARD_CMD11_READ_DAT_UNTIL_STOP_AUT12, /*MMC*/
	CARD_CMD12_STOP_TRANSMISSION,	//It is auto performed by Host
	CARD_CMD13_SEND_STATUS,
	CARD_CMD15_GO_INACTIVE_STATE,
	CARD_CMD16_SET_BLOCKLEN,
	CARD_CMD17_READ_SINGLE_BLOCK,
	CARD_CMD18_READ_MULTIPLE_BLOCK,
	CARD_CMD18_READ_MULTIPLE_BLOCK_AUT12,
	CARD_CMD20_WRITE_DAT_UNTIL_STOP, /*MMC*/	
	CARD_CMD20_WRITE_DAT_UNTIL_STOP_AUT12, /*MMC*/
	CARD_CMD23_SET_BLOCK_COUNT, /*MMC*/
	CARD_CMD24_WRITE_BLOCK,
	CARD_CMD25_WRITE_MULTIPLE_BLOCK,
	CARD_CMD25_WRITE_MULTIPLE_BLOCK_AUT12,

	CARD_CMD26_PROGRAM_CID, /*MMC*/
	CARD_CMD27_PROGRAM_CSD,
	CARD_CMD28_SET_WRITE_PROT,
	CARD_CMD29_CLR_WRITE_PROT,
	CARD_CMD30_SEND_WRITE_PROT,	// ??

	CARD_CMD32_ERASE_WR_BLK_START, /*SD*/
	CARD_CMD33_ERASE_WR_BLK_END, /*SD*/

	CARD_CMD35_ERASE_GROUP_START, /*MMC*/
	CARD_CMD36_ERASE_GROUP_END, /*MMC*/

	CARD_CMD38_ERASE,

	CARD_CMD39_FAST_IO, /*MMC*/
	CARD_CMD40_GO_IRQ_STATE, /*MMC*/

	CARD_CMD42_LOCK_UNLOCK_SD, /*SD*/	// ??
	CARD_CMD42_LOCK_UNLOCK_MMC, /*MMC*/	// ??
	CARD_CMD55_APP_CMD,
	CARD_CMD56_GEN_CMD_SD, /*SD*/	//??
	CARD_CMD56_GEN_CMD_MMC, /*MMC*/	//??


	CARD_ACMD6_SET_BUS_WIDTH,	 /*SD*/
	CARD_ACMD13_SD_STATUS, /*SD*/
	CARD_ACMD22_SEND_NUM_WR_BLCOKS, /*SD*/
	CARD_ACMD23_SET_WR_BLK_ERASE_COUNT, /*SD*/
	CARD_ACMD41_SD_SEND_OP_COND, /*SD*/
	CARD_ACMD42_SET_CLR_CARD_DETECT, /*SD*/
	CARD_ACMD51_SEND_SCR, /*SD*/

        CARD_ACMD6_SET_EXT_CSD,

#if defined(SPRD_SUPPORT_MCEX)
	CARD_CMD34_READ_SEC_CMD,
	CARD_CMD35_WRITE_SEC_CMD,
	CARD_CMD36_SEND_PSI,
	CARD_CMD37_CTL_TRM,
#endif

	CARD_CMDMAX
}
SDIO_CARD_PAL_CMD_E;

typedef enum 
{
	SDIO_DMA_IN = 1,
	SDIO_DMA_OUT,
	SDIO_DMA_BIDIRECTIONAL
}SDIO_DMA_DIRECTION;

typedef struct CARD_DATA_PARAM_TAG
{
	uint8* databuf;	// the buffer address ,that data will be stored in or  read from
	uint32 blkLen;	// block size
	uint32 blkNum;	// block number
	SDIO_DMA_DIRECTION direction;
}
CARD_DATA_PARAM_T;

typedef enum
{
	SDIO_CARD_PAL_ERR_NONE			= 0,
	SDIO_CARD_PAL_ERR_RSP				= BIT_0,
	SDIO_CARD_PAL_ERR_CMD12			= BIT_1,
	SDIO_CARD_PAL_ERR_CUR_LIMIT		= BIT_2,
	SDIO_CARD_PAL_ERR_DATA_END		= BIT_3,
	SDIO_CARD_PAL_ERR_DATA_CRC		= BIT_4,
	SDIO_CARD_PAL_ERR_DATA_TIMEOUT	= BIT_5,
	SDIO_CARD_PAL_ERR_CMD_INDEX		= BIT_6,
	SDIO_CARD_PAL_ERR_CMD_END		= BIT_7,
	SDIO_CARD_PAL_ERR_CMD_CRC		= BIT_8,
	SDIO_CARD_PAL_ERR_CMD_TIMEOUT	= BIT_9
}
SDIO_CARD_PAL_ERROR_E;
PUBLIC SDIO_CARD_PAL_ERROR_E SDIO_Card_Pal_SendCmd(
	/*IN*/SDIO_CARD_PAL_HANDLE handle,
	/*IN*/SDIO_CARD_PAL_CMD_E cmd,
	/*IN*/uint32 argument,
	/*IN*/CARD_DATA_PARAM_T* dataParam,
	/*OUT*/uint8* rspBuf
);

PUBLIC BOOLEAN SDIO_Card_Pal_Close(SDIO_CARD_PAL_HANDLE handle);


uint32 SCI_GetTickCount(void);



#endif



